# vim:fileencoding=utf-8:foldmethod=marker

# Fonts
font_family FiraCode Nerd Font
font_size   15  
disable_ligatures cursor

# Cursor customization
cursor_shape block
shell_integration no-cursor

# Scrollback
scrollback_lines 5000

# Terminal bell
enable_audio_bell no

# Window layout
enabled_layouts tall, fat, stack
window_margin_width 2
window_padding_width 2
active_border_color #009900
inactive_border_color #505050
inactive_text_alpha 0.7
hide_window_decorations yes

#: Color scheme {{{
# Dracula https://github.com/dracula/kitty
foreground            #f8f8f2
background            #282a36
selection_foreground  #ffffff
selection_background  #44475a

url_color #8be9fd

# black
color0  #21222c
color8  #6272a4

# red
color1  #ff5555
color9  #ff6e6e

# green
color2  #50fa7b
color10 #69ff94

# yellow
color3  #f1fa8c
color11 #ffffa5

# blue
color4  #bd93f9
color12 #d6acff

# magenta
color5  #ff79c6
color13 #ff92df

# cyan
color6  #8be9fd
color14 #a4ffff

# white
color7  #f8f8f2
color15 #ffffff

# Cursor colors
cursor            #f8f8f2
cursor_text_color background

# Tab bar colors
active_tab_foreground   #282a36
active_tab_background   #f8f8f2
inactive_tab_foreground #282a36
inactive_tab_background #6272a4

# Marks
mark1_foreground #282a36
mark1_background #ff5555

# Splits/Windows
active_border_color #f8f8f2
inactive_border_color #6272a4
#: }}}

# Maps

kitty_mod ctrl+shift

map kitty_mod+y     launch --stdin-source=@last_cmd_output --type=clipboard
map kitty_mod+f     launch --type=overlay --stdin-source=@screen_scrollback fzf --tac --no-sort --no-mouse -i
map kitty_mod+enter launch --cwd=current
map cmd+enter       new_window
map kitty_mod+x     toggle_layout stack
map kitty_mod+f     move_window_forward
map kitty_mod+b     move_window_backward
map kitty_mod+r     start_resizing_window
map cmd+r           start_resizing_window

map cmd+t           new_tab
map kitty_mod+t     new_tab
map cmd+w           close_tab
map ctrl+tab        next_tab
map ctrl+shift+tab  previous_tab
map shift+cmd+i     set_tab_title

map cmd+alt+1       goto_tab 1
map cmd+alt+2       goto_tab 2
map cmd+alt+3       goto_tab 3
map cmd+alt+4       goto_tab 4
map cmd+alt+5       goto_tab 5
map cmd+alt+6       goto_tab 6
map cmd+alt+7       goto_tab 7

#: Layout management {{{

#: Next layout

# map kitty_mod+l next_layout


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:     map ctrl+alt+p last_used_layout

#: There is also a toggle_layout action that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

#: Open URL

# map kitty_mod+e open_url_with_hints

#::  Open a currently visible URL using the keyboard. The program used
#::  to open the URL is specified in open_url_with.

#: Insert selected path

# map kitty_mod+p>f kitten hints --type path --program -

#::  Select a path/filename and insert it into the terminal. Useful,
#::  for instance to run git commands on a filename output from a
#::  previous git command.

#: Open selected path

# map kitty_mod+p>shift+f kitten hints --type path

#::  Select a path/filename and open it with the default open program.

#: Insert selected line

# map kitty_mod+p>l kitten hints --type line --program -

#::  Select a line of text and insert it into the terminal. Useful for
#::  the output of things like: `ls -1`.

#: Insert selected word

# map kitty_mod+p>w kitten hints --type word --program -

#::  Select words and insert into terminal.

#: Insert selected hash

# map kitty_mod+p>h kitten hints --type hash --program -

#::  Select something that looks like a hash and insert it into the
#::  terminal. Useful with git, which uses SHA1 hashes to identify
#::  commits.

#: Open the selected file at the selected line

# map kitty_mod+p>n kitten hints --type linenum

#::  Select something that looks like filename:linenum and open it in
#::  vim at the specified line number.

#: Open the selected hyperlink

# map kitty_mod+p>y kitten hints --type hyperlink

#::  Select a hyperlink (i.e. a URL that has been marked as such by
#::  the terminal program, for example, by `ls --hyperlink=auto`).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see hints kitten
#: <https://sw.kovidgoyal.net/kitty/kittens/hints/>.
#: }}}

#: Miscellaneous {{{

#: Toggle macOS secure keyboard entry

# map opt+cmd+s toggle_macos_secure_keyboard_entry

#: Open the kitty command shell

# map kitty_mod+escape kitty_shell window

#::  Open the kitty shell in a new window / tab / overlay / os_window
#::  to control kitty using commands.

#: Clear up to cursor line

# map cmd+k clear_terminal to_cursor active

#: Reload kitty.conf

# map kitty_mod+f5 load_config_file
# map ctrl+cmd+,   load_config_file

#::  Reload kitty.conf, applying any changes since the last time it
#::  was loaded. Note that a handful of options cannot be dynamically
#::  changed and require a full restart of kitty. Particularly, when
#::  changing shortcuts for actions located on the macOS global menu
#::  bar, a full restart is needed. You can also map a keybinding to
#::  load a different config file, for example::

#::      map f5 load_config /path/to/alternative/kitty.conf

#::  Note that all options from the original kitty.conf are discarded,
#::  in other words the new configuration *replace* the old ones.

#: Debug kitty configuration

# map kitty_mod+f6 debug_config
# map opt+cmd+,    debug_config

#::  Show details about exactly what configuration kitty is running
#::  with and its host environment. Useful for debugging issues.

#: Send arbitrary text on key presses

#::  E.g. map ctrl+shift+alt+h send_text all Hello World

#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
#::  client program when pressing specified shortcut keys. For
#::  example::

#::      map ctrl+alt+a send_text all Special text

#::  This will send "Special text" when you press the Ctrl+Alt+A key
#::  combination. The text to be sent is a python string literal so
#::  you can use escapes like \x1b to send control codes or \u21fb to
#::  send Unicode characters (or you can just input the Unicode
#::  characters directly as UTF-8 text). You can use `kitty +kitten
#::  show_key` to get the key escape codes you want to emulate.

#::  The first argument to send_text is the keyboard modes in which to
#::  activate the shortcut. The possible values are normal,
#::  application, kitty or a comma separated combination of them. The
#::  modes normal and application refer to the DECCKM cursor key mode
#::  for terminals, and kitty refers to the kitty extended keyboard
#::  protocol. The special value all means all of them.

#::  Some more examples::

#::      # Output a word and move the cursor to the start of the line (like typing and pressing Home)
#::      map ctrl+alt+a send_text normal Word\x1b[H
#::      map ctrl+alt+a send_text application Word\x1bOH
#::      # Run a command at a shell prompt (like typing the command and pressing Enter)
#::      map ctrl+alt+a send_text normal,application some command with arguments\r

#: Open kitty Website

# map shift+cmd+/ open_url https://sw.kovidgoyal.net/kitty/

#: }}}

#: }}}
